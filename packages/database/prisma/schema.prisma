// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // see index.ts
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Footage {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  footageVotes FootageVotes[] @relation("footage")
  youtubeUrl   String         @unique
  videoFormat  Int            @default(0)
  footageType  FootageType    @default(CSG)
  upVotes      Int            @default(0)
  downVotes    Int            @default(0)
  isAnalyzed   Boolean        @default(false)
  isParsed     Boolean        @default(false)
  clips        Clip[]         @relation("footage")
}

model FootageVotes {
  id         String      @id @default(cuid())
  footage    Footage     @relation("footage", fields: [footageId], references: [id])
  footageId  String
  user       User        @relation("user", fields: [userId], references: [id])
  userId     String
  discordId  Int
  isGame     Boolean     @default(false)
  actualGame FootageType
}

model Clip {
  id        String  @id @default(cuid())
  footage   Footage @relation(fields: [footageId], references: [id])
  footageId String
  uuid      String  @unique
}

enum FootageType {
  VAL
  CSG
  TF2
  APE
  COD
}

// NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // our items
  blacklisted  Boolean?
  footage      Footage[]
  footageVotes FootageVotes[] @relation("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
