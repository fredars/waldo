// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model WaldoPage {
  name             String    @id
  maintenance      Boolean   @default(false)
  isCustomAlert    Boolean   @default(false)
  alertTitle       String?
  alertDescription String?
  parentName       String
  site             WaldoSite @relation(fields: [parentName], references: [name], onDelete: Cascade)
}

model WaldoSite {
  name             String      @id
  maintenance      Boolean     @default(false)
  isCustomAlert    Boolean
  alertTitle       String?
  alertDescription String?
  pages            WaldoPage[]
}

model Gameplay {
  id           String         @id @default(cuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  gameplayVotes GameplayVotes[] @relation("gameplay")
  youtubeUrl   String         @unique
  videoFormat  Int            @default(0)
  gameplayType  GameplayType    @default(CSG)
  isAnalyzed   Boolean        @default(false)
  clips        Clip[]
}

model GameplayVotes {
  id         String      @id @default(cuid())
  gameplay    Gameplay     @relation("gameplay", fields: [gameplayId], references: [id], onDelete: Cascade)
  gameplayId  String
  user       User        @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  isGame     Boolean     @default(false)
  actualGame GameplayType
}

model Clip {
  id        String  @id @default(cuid())
  gameplay   Gameplay @relation(fields: [gameplayId], references: [id])
  gameplayId String
}

enum GameplayType {
  VAL
  CSG
  TF2
  APE
  COD
  R6S
}

// NEXT-AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Roles {
  USER
  MOD
  ADMIN
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // our items
  blacklisted   Boolean        @default(false)
  gameplay      Gameplay[]
  role          Roles          @default(USER)
  gameplayVotes GameplayVotes[] @relation("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
